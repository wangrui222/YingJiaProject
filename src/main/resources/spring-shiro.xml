<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


<!--启用shiro注解 -->
	

 <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
       <!-- 调用我们配置的权限管理器 -->  
        <property name="securityManager" ref="securityManager" />  
         <!-- 配置我们的登录请求地址 -->  
          <property name="loginUrl" value="/view/login.jsp" />  
         <!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->  
          <property name="successUrl" value="/view/index.jsp" />  
        <!-- 如果您请求的资源不再您的权限范围，则跳转到/   请求地址 -->  
         <property name="unauthorizedUrl" value="/unauthorized.jsp" />  
          <!-- 权限配置 -->  
         <property name="filterChainDefinitions">  
              <value>  
                  <!-- anon表示此地址不需要任何权限即可访问 -->
                  /notify_url.jsp=anon
                  /return_url.jsp=anon
                  /upload/**=anon
                 /view/login.jsp=anon
                 /alipay/alipay.jsp=anon  
                 /product/**=anon
                 /member/**=anon
                 /view/index/invest/**=anon
                  /view/index/zhanghu/**=anon
                /view/index/**=anon
                 /resources/** = anon 
                 /wangrui/logout=logout
                 /wangrui/**=anon
                 <!--所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login -->  
                 /** = authc  
             </value>  
         </property>  
      </bean>  

     <!-- 会话ID生成器 -->  
     <bean id="sessionIdGenerator"  
         class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />  
     <!-- 会话Cookie模板 关闭浏览器立即失效 -->  
     <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
         <constructor-arg value="sid" />  
         <property name="httpOnly" value="true" />  
         <property name="maxAge" value="-1" />  
     </bean>  
     <!-- 会话DAO -->  
     <bean id="sessionDAO"  
         class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
         <property name="sessionIdGenerator" ref="sessionIdGenerator" />  
     </bean>  
     <!-- 会话验证调度器，每1分钟执行一次验证 ，设定会话超时及保存 -->  
     <bean name="sessionValidationScheduler"  
         class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">  
         <property name="interval" value="1800000" />  
         <property name="sessionManager" ref="sessionManager" />  
     </bean>  
     <!-- 会话管理器 -->  
     <bean id="sessionManager"  
         class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
         <!-- 全局会话超时时间（单位毫秒），默认  分钟1800000 -->  
         <property name="globalSessionTimeout" value="18000000" />  
         <property name="deleteInvalidSessions" value="true" />  
         <property name="sessionValidationSchedulerEnabled" value="true" />  
         <property name="sessionValidationScheduler" ref="sessionValidationScheduler" />  
         <property name="sessionDAO" ref="sessionDAO" />  
         <property name="sessionIdCookieEnabled" value="true" />  
         <property name="sessionIdCookie" ref="sessionIdCookie" />  
     </bean>  
   
   
     <!-- 安全管理器 -->  
     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
         <property name="realm" ref="userRealm" />  
         <!-- 使用下面配置的缓存管理器 -->  
        <!--   <property name="cacheManager" ref="cacheManager" />  
 -->          <property name="sessionManager" ref="sessionManager" />  
      </bean>  
      
      
      <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
      <bean  class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
          <property name="staticMethod"  
              value="org.apache.shiro.SecurityUtils.setSecurityManager" />  
          <property name="arguments" ref="securityManager" />  
      </bean>  
  
    <!-- 注册自定义的Realm，并把密码匹配器注入，使用注解的方式自动注解会无法正确匹配密码 -->  
    <bean id="userRealm" class="com.demo.realm.UserRealm">  
       <!--  <property name="cacheManager" ref="cacheManager"/>  
        <property name="cachingEnabled" value="false"/>   -->
        <property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
    </bean>  
      
    <!-- <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />   -->
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  

	
	<!--启用shiro注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	

</beans>


